ggplot2::xlab("Distance to ligand (Å)") +
ggplot2::ylab("Fraction of allosteric mutations") +
ggplot2::theme_bw() +
ggplot2::facet_grid(. ~ protein) +
ggplot2::scale_color_manual("effect sign", values = c("#6aa0bd", "#cf8d76"))
ggplot2::ggplot(plot_dt, ggplot2::aes(x=scHAmin_ligand, y=frac_allostery, color = binding_effect)) +
ggplot2::geom_line(size=1) +
ggplot2::geom_abline(linetype = 2) +
ggplot2::xlab("Distance to ligand (Å)") +
ggplot2::ylab("Fraction of allosteric mutations") +
ggplot2::theme_bw() +
ggplot2::facet_grid(. ~ protein) +
ggplot2::scale_color_manual("effect sign", values = c("#6aa0bd", "#cf8d76"))
ggplot2::ggplot(plot_dt, ggplot2::aes(x=scHAmin_ligand, y=frac_allostery, color = binding_effect)) +
ggplot2::geom_line(size=1) +
ggplot2::geom_abline(linetype = 2) +
ggplot2::xlab("Distance to ligand (Å)") +
ggplot2::ylab("Fraction of allosteric mutations") +
ggplot2::theme_bw() +
ggplot2::facet_grid(. ~ protein, scales = "free_x") +
ggplot2::scale_color_manual("effect sign", values = c("#6aa0bd", "#cf8d76"))
library(ggplot2)
library(ROCR)
ggplot2::ggsave("~/Desktop/mapping_allostery/plots/20220611_FracAllostericMutWithDistLigand.pdf", p, width = 6, height = 2.5)
p <- ggplot2::ggplot(plot_dt, ggplot2::aes(x=scHAmin_ligand, y=frac_allostery, color = binding_effect)) +
ggplot2::geom_line(size=1) +
ggplot2::geom_abline(linetype = 2) +
ggplot2::xlab("Distance to ligand (Å)") +
ggplot2::ylab("Fraction of allosteric mutations") +
ggplot2::theme_bw() +
ggplot2::facet_grid(. ~ protein, scales = "free_x") +
ggplot2::scale_color_manual("effect sign", values = c("#6aa0bd", "#cf8d76"))
ggplot2::ggsave("~/Desktop/mapping_allostery/plots/20220611_FracAllostericMutWithDistLigand.pdf", p, width = 6, height = 2.5)
ggplot2::ggsave("~/Desktop/mapping_allostery/plots/20220611_FracAllostericMutWithDistLigand.pdf", p, width = 6, height = 2)
p <- ggplot2::ggplot(plot_dt, ggplot2::aes(x=scHAmin_ligand, y=frac_allostery, color = binding_effect)) +
ggplot2::geom_line(size=1.5) +
ggplot2::geom_abline(linetype = 2) +
ggplot2::xlab("Distance to ligand (Å)") +
ggplot2::ylab("Fraction of allosteric mutations") +
ggplot2::theme_bw() +
ggplot2::facet_grid(. ~ protein, scales = "free_x") +
ggplot2::scale_color_manual("effect sign", values = c("#6aa0bd", "#cf8d76"))
ggplot2::ggsave("~/Desktop/mapping_allostery/plots/20220611_FracAllostericMutWithDistLigand.pdf", p, width = 6, height = 2)
p <- ggplot2::ggplot(plot_dt, ggplot2::aes(x=scHAmin_ligand, y=frac_allostery, color = binding_effect)) +
ggplot2::geom_line(size=0.75) +
ggplot2::geom_abline(linetype = 2) +
ggplot2::xlab("Distance to ligand (Å)") +
ggplot2::ylab("Fraction of allosteric mutations") +
ggplot2::theme_bw() +
ggplot2::facet_grid(. ~ protein, scales = "free_x") +
ggplot2::scale_color_manual("effect sign", values = c("#6aa0bd", "#cf8d76"))
ggplot2::ggsave("~/Desktop/mapping_allostery/plots/20220611_FracAllostericMutWithDistLigand.pdf", p, width = 6, height = 2)
ggplot2::ggsave("~/Desktop/mapping_allostery/plots/20220611_FracAllostericMutWithDistLigand.pdf", p, width = 7, height = 2.5)
p <- ggplot2::ggplot(plot_dt[!(protein == "GB1")], ggplot2::aes(x=scHAmin_ligand, y=frac_allostery, color = binding_effect)) +
ggplot2::geom_line(size=0.75) +
ggplot2::geom_abline(linetype = 2) +
ggplot2::xlab("Distance to ligand (Å)") +
ggplot2::ylab("Fraction of allosteric mutations") +
ggplot2::theme_bw() +
ggplot2::facet_grid(. ~ protein, scales = "free_x") +
ggplot2::scale_color_manual("effect sign", values = c("#6aa0bd", "#cf8d76"))
ggplot2::ggsave("~/Desktop/mapping_allostery/plots/20220611_FracAllostericMutWithDistLigand.pdf", p, width = 7, height = 2.5)
p
p <- ggplot2::ggplot(plot_dt, ggplot2::aes(x=scHAmin_ligand, y=frac_allostery, color = binding_effect)) +
ggplot2::geom_line(size=0.75) +
ggplot2::geom_abline(linetype = 2) +
ggplot2::xlab("Distance to ligand (Å)") +
ggplot2::ylab("Fraction of allosteric mutations") +
ggplot2::theme_bw() +
ggplot2::facet_grid(. ~ protein, scales = "free_x") +
ggplot2::scale_color_manual("effect sign", values = c("#6aa0bd", "#cf8d76"))
ggplot2::ggsave("~/Desktop/mapping_allostery/plots/20220611_FracAllostericMutWithDistLigand_ALL.pdf", p, width = 7, height = 2.5)
p <- ggplot2::ggplot(plot_dt[!(protein == "GB1")], ggplot2::aes(x=scHAmin_ligand, y=frac_allostery, color = binding_effect)) +
ggplot2::geom_line(size=0.75) +
ggplot2::geom_abline(linetype = 2) +
ggplot2::xlab("Distance to ligand (Å)") +
ggplot2::ylab("Fraction of allosteric mutations") +
ggplot2::theme_bw() +
ggplot2::facet_grid(. ~ protein, scales = "free_x") +
ggplot2::scale_color_manual("effect sign", values = c("#6aa0bd", "#cf8d76"))
ggplot2::ggsave("~/Desktop/mapping_allostery/plots/20220611_FracAllostericMutWithDistLigand.pdf", p, width = 5, height = 2.5)
ggplot2::ggsave("~/Desktop/mapping_allostery/plots/20220611_FracAllostericMutWithDistLigand.pdf", p, width = 5.5, height = 2.5)
ggplot2::ggsave("~/Desktop/mapping_allostery/plots/20220611_FracAllostericMutWithDistLigand_ALL.pdf", p, width = 7.5, height = 2.5)
p <- ggplot2::ggplot(plot_dt[!(protein == "GB1")], ggplot2::aes(x=scHAmin_ligand, y=frac_allostery, color = binding_effect)) +
ggplot2::geom_line(size=0.75) +
ggplot2::geom_abline(linetype = 2) +
ggplot2::xlab("Distance to ligand (Å)") +
ggplot2::ylab("Fraction of allosteric mutations") +
ggplot2::theme_bw() +
ggplot2::facet_grid(. ~ protein, scales = "free_x") +
ggplot2::scale_color_manual("effect sign", values = c("#6aa0bd", "#cf8d76"))
p <- ggplot2::ggplot(plot_dt, ggplot2::aes(x=scHAmin_ligand, y=frac_allostery, color = binding_effect)) +
ggplot2::geom_line(size=0.75) +
ggplot2::geom_abline(linetype = 2) +
ggplot2::xlab("Distance to ligand (Å)") +
ggplot2::ylab("Fraction of allosteric mutations") +
ggplot2::theme_bw() +
ggplot2::facet_grid(. ~ protein, scales = "free_x") +
ggplot2::scale_color_manual("effect sign", values = c("#6aa0bd", "#cf8d76"))
ggplot2::ggsave("~/Desktop/mapping_allostery/plots/20220611_FracAllostericMutWithDistLigand_ALL.pdf", p, width = 7.5, height = 2.5)
p <- ggplot2::ggplot(plot_dt[!(protein == "GB1")], ggplot2::aes(x=scHAmin_ligand, y=frac_allostery, color = binding_effect)) +
ggplot2::geom_line(size=0.75) +
ggplot2::geom_abline(linetype = 2) +
ggplot2::xlab("Distance to ligand (Å)") +
ggplot2::ylab("Fraction of allosteric mutations") +
ggplot2::theme_bw() +
ggplot2::facet_grid(. ~ protein, scales = "free_x") +
ggplot2::scale_color_manual("effect sign", values = c("#6aa0bd", "#cf8d76"))
ggplot2::ggsave("~/Desktop/mapping_allostery/plots/20220611_FracAllostericMutWithDistLigand.pdf", p, width = 5.5, height = 2.5)
library(data.table)
library(ggplot2)
DT <- fread("Desktop/temp/ddpca/tableS7.txt")
PTM <- fread("Desktop/temp/ddpca/PDZ_PTM.txt")
View(PTM)
DT <- fread("Desktop/temp/ddpca/tableS7.txt")
PTM <- fread("Desktop/temp/ddpca/PDZ_PTM.txt")
PTM <- fread("Desktop/temp/ddpca/PDZ_PTM.txt")[, 1:3]
PTM
DT
unique(DT$protein)
DT <- fread("Desktop/temp/ddpca/tableS7.txt")[protein == "PSD95-PDZ3"]
PTM <- fread("Desktop/temp/ddpca/PDZ_PTM.txt")[, 1:3]
unique(DT$protein)
unique(DT$Pos_ref)
DT[ Pos_ref == 338,]
DT[ Pos_ref == 338 & allosteric_mutation == T, ]
log2(500000/0.1*4e6)
log2(500000/(0.1*4e6))
## Libraries
library(data.table)
library(Seurat)
library(ggplot2); theme_set(theme_bw())
library(gridExtra)
library(parallel); ncores = detectCores()/2
library(reshape2)
library(cowplot)
## Dir
setwd("/gpfs/commons/groups/lappalainen_lab/jdomingo/projects/004-dosage_network/009-DEanalyses/")
### (A) Run FindMarkers between all pairwise comparison of NT to find non-biased NT cells
ntc_crispr_comb_dt <- setnames(data.table(t(combn(sort(ntc_crispr_v),2))), c("ntc_1", "ntc_2"))
sessionInfo()
conditionMessage
devtools::install_github("katsevich-lab/sceptre")
library(bioMart)
BiocManager::install("biomaRt")
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(bioMart)
library(biomaRt)
# Add ENSEMBL gene id
ensembl <- biomaRt::useEnsembl(
biomart = "ensembl",
dataset = "hsapiens_gene_ensembl",
host = "https://www.ensembl.org"
)
# Uniprot Mart
uniProt <- biomaRt::useMart("unimart", dataset="uniprot")
listMarts()
library(biomaRt)
listMarts()
library("biomaRt")
useMart(biomart = "unimart")
## Libraries
library(data.table)
library(Seurat)
library(biomaRt)
library(foreach)
library(doParallel); registerDoParallel(detectCores()/2)
library(ggplot2); theme_set(theme_classic())
library(stringr)
library(cowplot)
basename(getwd())
os.getcwd()
setwd("/Users/juliadomingo/Library/Group Containers/G69SCX94XU.duck/Library/Application Support/duck/Volumes.noindex/intftp.nygenome.org – SFTP/manuscripts/d2n/d2n_ms/08-gene_dosage_properties")
getwd()
folder_name <- basename(getwd())
data_dir = file.path("../../data", folder_name)
processed_data_dir = file.path("../../processed_data", folder_name)
plots_dir = file.path("../../plots", folder_name)
list.files(data_dir)
list.files(data_dir)
# Load Garcia Alonso dataset
TF_Ga_dt <- unique(rbind(fread(file = file.path(data_dir, "GarciaAlonso_TableS3_Normal.csv"))[, .(TF, target)],
fread(file = "/gpfs/commons/groups/lappalainen_lab/jdomingo/data/TFs/GarciaAlonso_GenRes_2019/Revised_Supplemental_Table_S4_Cancer.csv")[, .(TF, target)]))
# Load Garcia Alonso dataset
TF_Ga_dt <- unique(rbind(fread(file = file.path(data_dir, "GarciaAlonso_TableS3_Normal.csv"))[, .(TF, target)],
fread(file = file.path(data_dir, "GarciaAlonso_TableS4_Cancer.csv"))[, .(TF, target)]))
TF_Ga <- unique(TF_Ga_dt$TF)
GA.4 <- data.table(gene = d2n_genes,
value = d2n_genes %in% TF_Ga,
gene_set = "TF",
data_set = "Garcia-Alonso_2019")
getwd()
d2n <- readRDS("/Users/juliadomingo/Library/Group Containers/G69SCX94XU.duck/Library/Application Support/duck/Volumes.noindex/intftp.nygenome.org – SFTP/projects/004-dosage_network/009-DEanalyses/processed_data/after_seurat4.3/d2n_SeuratObj_PostQC_dCas9_NewMD.RDS")
rm(Exp)
d2n_genes <- rownames(d2n)[!grepl("CRISPR", rownames(d2n))]
dosage_genes = c("GFI1B", "NFE2", "MYB", "TET2")
GA.4 <- data.table(gene = d2n_genes,
value = d2n_genes %in% TF_Ga,
gene_set = "TF",
data_set = "Garcia-Alonso_2019")
## Save to use in the future
saveRDS(file = file.path(processed_data_dir, "GA.4_TFs.RDS"), GA.4)
qualitative_v <- list.files(processed_data_dir)[grepl("^GA.", list.files(processed_data_dir))]
qualitative_v
GA <- do.call("rbind",
lapply(qualitative_v, function(quantfile){
DT <- readRDS(file.path(processed_data_dir, quantfile))
})
)
quantfile
qualitative_v
readRDS(file.path(processed_data_dir, "GA.0_IDsAnnotations.RDS"))
colnames(GA.4)
## Save to use in the future
saveRDS(file = file.path(processed_data_dir, "GA.0_IDsAnnotations.RDS"), GA.0[, .(gene,value, gene_set, data_set)])
# Add ENSEMBL gene id
ensembl <- biomaRt::useEnsembl(
biomart = "ensembl",
dataset = "hsapiens_gene_ensembl",
host = "https://www.ensembl.org"
)
symbols <- as.data.table(biomaRt::getBM(
attributes = c("ensembl_gene_id", "external_gene_name", "ensembl_peptide_id", "gene_biotype", "chromosome_name"),
filters = "external_gene_name",
values = c(d2n_genes, "CFAP210"),
mart = ensembl
))
symbols[ensembl_gene_id == "ENSG00000154479", external_gene_name := "CCDC173"]
symbols <- unique(symbols)
GA.0 <- setnames(unique(symbols[, .(external_gene_name, gene_biotype)]), c("gene", "gene_biotype"))
GA.0[, value := ifelse(gene_biotype == "lncRNA", T, F)]
GA.0[, gene_set := "lncRNA"]
GA.0[, dataset := "Biotype"]
## Save to use in the future
saveRDS(file = file.path(processed_data_dir, "GA.0_IDsAnnotations.RDS"), GA.0[, .(gene,value, gene_set, data_set)])
GA.0 <- setnames(unique(symbols[, .(external_gene_name, gene_biotype)]), c("gene", "gene_biotype"))
GA.0[, value := ifelse(gene_biotype == "lncRNA", T, F)]
GA.0[, gene_set := "lncRNA"]
GA.0[, dataset := "Biotype"]
symbols <- unique(symbols)
GA.0 <- setnames(unique(symbols[, .(external_gene_name, gene_biotype)]), c("gene", "gene_biotype"))
symbols[ensembl_gene_id == "ENSG00000154479", external_gene_name := "CCDC173"]
symbols <- as.data.table(biomaRt::getBM(
attributes = c("ensembl_gene_id", "external_gene_name", "ensembl_peptide_id", "gene_biotype", "chromosome_name"),
filters = "external_gene_name",
values = c(d2n_genes, "CFAP210"),
mart = ensembl
))
symbols[ensembl_gene_id == "ENSG00000154479", external_gene_name := "CCDC173"]
symbols <- unique(symbols)
GA.0 <- setnames(unique(symbols[, .(external_gene_name, gene_biotype)]), c("gene", "gene_biotype"))
GA.0[, value := ifelse(gene_biotype == "lncRNA", T, F)]
GA.0[, gene_set := "lncRNA"]
GA.0[, dataset := "Biotype"]
## Save to use in the future
saveRDS(file = file.path(processed_data_dir, "GA.0_IDsAnnotations.RDS"), GA.0[, .(gene,value, gene_set, dataset)])
# Load Garcia Alonso dataset
TF_Ga_dt <- unique(rbind(fread(file = file.path(data_dir, "GarciaAlonso_TableS3_Normal.csv"))[, .(TF, target)],
fread(file = file.path(data_dir, "GarciaAlonso_TableS4_Cancer.csv"))[, .(TF, target)]))
TF_Ga <- unique(TF_Ga_dt$TF)
GA.4 <- data.table(gene = d2n_genes,
value = d2n_genes %in% TF_Ga,
gene_set = "TF",
dataset = "Garcia-Alonso_2019")
## Save to use in the future
saveRDS(file = file.path(processed_data_dir, "GA.4_TFs.RDS"), GA.4)
qualitative_v <- list.files(processed_data_dir)[grepl("^GA.", list.files(processed_data_dir))]
GA <- do.call("rbind",
lapply(qualitative_v, function(quantfile){
DT <- readRDS(file.path(processed_data_dir, quantfile))
})
)
View(GA)
## (9) Disease genes - OMIM database
GM2_raw <- fread(file.path(data_dir, "OMIM_genemap2.txt"))
## (9) Disease genes - OMIM database
GM2_raw <- fread(file.path(data_dir, "OMIM_genemap2.txt"))
## (9) Disease genes - OMIM database
GM2_raw <- fread(file.path(data_dir, "OMIM_genemap2.txt"))
GM2 <- GM2_raw[!(Phenotypes == "" | `Ensembl Gene ID` == ""), ]
sum(unique(GM2$`Ensembl Gene ID`) %in% symbols$ensembl_gene_id)
GM2_D2N <- GM2[`Ensembl Gene ID` %in% symbols$ensembl_gene_id, ]
omim_genes <- unique(symbols[ensembl_gene_id %in% GM2_D2N$`Ensembl Gene ID`, external_gene_name])
GA.9 <- data.table(gene = d2n_genes,
gene_set = "Disease_gene(OMIM)",
value = d2n_genes %in% omim_genes,
dataset = "OMIM")
GA.2 <- data.table(gene = d2n_genes,
gene_set = "Disease_gene(OMIM)",
value = d2n_genes %in% omim_genes,
dataset = "OMIM")
## Save to use in the future
saveRDS(file = file.path(processed_data_dir, "GA.2_DiseaseGenesOMIM.RDS"), GA.2)
qualitative_v <- list.files(processed_data_dir)[grepl("^GA.", list.files(processed_data_dir))]
qualitative_v
d2n_lncRNAs_v <- unique(symbols[gene_biotype == "lncRNA", external_gene_name])
GWAS_dt <- rbind(fread(file.path(data_dir, "MorrisScience2023_SupplementaryTable_refGeneAnnotations.txt"))[, .(gene, Platelets, RBCs, Reticulocytes, WBCs)],
data.table(gene = d2n_lncRNAs_v,
Platelets = rep(F, length(d2n_lncRNAs_v)),
RBCs = rep(F, length(d2n_lncRNAs_v)),
Reticulocytes = rep(F, length(d2n_lncRNAs_v)),
WBCs = rep(F, length(d2n_lncRNAs_v))) )
GA.1 <- melt.data.table(GWAS_dt[gene %in% d2n_genes, ], id.vars = "gene", variable.name = "GWAS_trait", value.name = "value")
GA.1[, gene_set := paste0(GWAS_trait, "(UKB GWAS)")]
GA.1[, dataset := "UKB"]
## Save to use in the future
saveRDS(object = GA.1[, .SD, .SDcols = colnames(GA.0)], file = "processed_data/GA.1_GWASgenesUKB.RDS")
colnames(GA.0)
## Save to use in the future
saveRDS(object = GA.1[, .(gene,value, gene_set, dataset)], file = "processed_data/GA.1_GWASgenesUKB.RDS")
## Save to use in the future
saveRDS(object = GA.1[, .(gene,value, gene_set, dataset)], file = file.path(processed_data_dir, "GA.1_GWASgenesUKB.RDS"))
qualitative_v <- list.files(processed_data_dir)[grepl("^GA.", list.files(processed_data_dir))]
qualitative_v
GA <- do.call("rbind",
lapply(qualitative_v, function(quantfile){
DT <- readRDS(file.path(processed_data_dir, quantfile))
})
)
hkg_long <- fread(file.path(data_dir, "EisenbergTrendsGen2013_HK_genes.txt"), header = F,  stringsAsFactors = F, fill = T)$V1
hkg <- unique(hkg_long)[!(is.na(unique(hkg_long)))]
hkg_symbols <- as.data.table(biomaRt::getBM(
attributes = c("ensembl_gene_id", "external_gene_name"),
filters = "external_gene_name",
values = hkg,
mart = ensembl
))
hkg_symbols[, d2n := ifelse(ensembl_gene_id %in% unique(symbols$ensembl_gene_id), T, F)]
hkg_symbols[, d2n_genename := ifelse(external_gene_name %in% d2n_genes, T, F)]
hkg_symbols[, .N, d2n]
GA.3 = data.table(gene = d2n_genes,
gene_set = "Houskeeping",
value = d2n_genes %in% hkg_symbols[d2n == T, external_gene_name],
dataset = "Eisenberg_2013")
## Save to use in the future
saveRDS(file = "processed_data/GA.3_HousekeepingHsiao.RDS", GA.3)
## Save to use in the future
saveRDS(file = file.path(processed_data_dir, "GA.3_HousekeepingHsiao.RDS", GA.3)
)
## Save to use in the future
saveRDS(file = file.path(processed_data_dir, "GA.3_HousekeepingHsiao.RDS"), GA.3)
qualitative_v <- list.files(processed_data_dir)[grepl("^GA.", list.files(processed_data_dir))]
qualitative_v
GA <- do.call("rbind",
lapply(qualitative_v, function(quantfile){
DT <- readRDS(file.path(processed_data_dir, quantfile))
})
)
# Order categorical annotations based on similarity
# Generate matrix with 1/0 for each
GA[, num_value := ifelse(value == T, 1, 0)]
plot_dt <- GA
ga_mat_dt <- dcast.data.table(GA[, .(gene, gene_set, num_value)], formula = gene_set ~ gene, value.var = "num_value")
ga_mat <- as.matrix(ga_mat_dt[, 2: ncol(ga_mat_dt)])
rownames(ga_mat) <- ga_mat_dt$gene_set
ga_dist <- dist(ga_mat, method = "euclidean")
ga_clust_obj <- hclust(ga_dist)
ord_ga <- ga_clust_obj$labels[ga_clust_obj$order]
plot_dt[, gene_set := factor(gene_set, levels = ord_ga)]
plot_dt[, gene := factor(gene, levels = ord_tg)]
pC <- ggplot(plot_dt, aes(x = gene_set, y = gene)) +
geom_tile(aes(fill=value), colour="white") +
scale_fill_manual("", values = list(`TRUE` = "black", `FALSE` = "grey95")) +
facet_grid(. ~ dataset, scales = "free_x", space = "free_x") +
theme_classic() +
scale_x_discrete(expand = expansion(mult = c(0.02, 0.02))) +
scale_y_discrete(expand = expansion(mult = c(0.02, 0.02))) +
theme(legend.position = "") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
theme(axis.title = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(), axis.line = element_blank()) +
theme(legend.key = element_blank(), strip.background = element_rect(colour="white", fill="white")) +
theme(strip.text.x.top = element_text(angle = 90))
pC
data_dir
# Gene body constraint
gnomAD_metrics_dt <- fread(file.path(data_dir, "gnomad.v2.1.1.lof_metrics.by_gene.txt"))[gene_id %in% symbols$ensembl_gene_id,]
gnomAD_metrics_dt[, gene_gnomAD := gene]
gene_to_replace = c("MTERFD3", "FAM175A", "MESDC1", "LINC00998")
replace_names = c("MTERF2", "ABRAXAS1", "TLNRD1", "SMIM30")
gnomAD_metrics_dt[gene_gnomAD %in% gene_to_replace, gene := replace_names[match(gene_gnomAD, gene_to_replace)]]
plot_dt <- melt.data.table(gnomAD_metrics_dt[, .(gene, pLI, oe_lof_upper, mis_z)], id.vars = "gene", variable.name = "metric")
p <- ggplot(plot_dt, aes(x = value)) +
geom_histogram() +
facet_grid(. ~ metric, scales = "free")
p
GQ.1 <- melt.data.table(rbind(gnomAD_metrics_dt[, .(gene, pLI, oe_lof_upper, mis_z)],
data.table(gene = d2n_genes[!(d2n_genes %in% gnomAD_metrics_dt$gene)],
pLI = NA,
oe_lof_upper = NA,
mis_z = NA)),
id.vars = "gene", variable.name = "metric")
GQ.1[, dataset := "gnomAD"]
GQ.1
## Save to use in the future
saveRDS(file = file.path(processed_data_dir, "GQ.1_Constraint.RDS"), GQ.1)
## (2) Dosage sensitivity
collins22 <- fread(file.path(data_dir, "CollinsCell2022_haplosufficiency.txt"))
data_dir
file.path(data_dir, "CollinsCell2022_haplosufficiency.txt")
fread(file.path(data_dir, "CollinsCell2022_haplosufficiency.txt"))
## (2) Dosage sensitivity
collins22 <- fread(file.path(data_dir, "CollinsCell2022_haplosufficiency.txt"))
## (2) Dosage sensitivity
collins22 <- fread(file.path(data_dir, "CollinsCell2022_haplosufficiency.txt"))
collins22[, gene := Gene]
gene_to_replace = c("MTERFD3", "FAM175A", "MESDC1", "LINC00998", "FAM27A")
replace_names = c("MTERF2", "ABRAXAS1", "TLNRD1", "SMIM30", "FAM27C")
collins22[Gene %in% gene_to_replace, gene := replace_names[match(Gene, gene_to_replace)]]
d2n_genes[!(d2n_genes %in% collins22$gene)]
## (2) Dosage sensitivity
collins22 <- fread(file.path(data_dir, "CollinsCell2022_haplosufficiency.txt"))collins22[, gene := Gene]
## (2) Dosage sensitivity
collins22 <- fread(file.path(data_dir, "CollinsCell2022_haplosufficiency.txt"))collins22[, gene := Gene]
## (2) Dosage sensitivity
collins22 <- fread(file.path(data_dir, "CollinsCell2022_haplosufficiency.txt"))[, gene := Gene]
gene_to_replace = c("MTERFD3", "FAM175A", "MESDC1", "LINC00998", "FAM27A")
replace_names = c("MTERF2", "ABRAXAS1", "TLNRD1", "SMIM30", "FAM27C")
collins22[Gene %in% gene_to_replace, gene := replace_names[match(Gene, gene_to_replace)]]
GQ.2 <-  melt.data.table(rbind(collins22[gene %in% d2n_genes, .(gene, pHaplo, pTriplo)],
data.table(gene = d2n_genes[!(d2n_genes %in% collins22$gene)],
pHaplo = NA,
pTriplo = NA)),
id.vars = "gene", variable.name = "metric")
GQ.2[, dataset := "Collins et al. 2022"]
# Save
saveRDS(file = file.path(processed_data_dir, "GQ.2_DosageSensitivity.RDS"), GQ.2)
## (3) Enhancer Domain Scores
Wang20_dt <- merge.data.table(fread(file.path(data_dir, "WangAJHG2020_enhancer_scores.txt")), symbols, by.x = "GeneSymbol", by.y = "ensembl_gene_id")
Wang20_dt[, gene := external_gene_name]
GQ.3 <- melt.data.table(rbind(Wang20_dt[gene %in% d2n_genes, .SD, .SDcols = colnames(Wang20_dt)[grepl("(Linking)|(EDS)|(^gene$)", colnames(Wang20_dt))]],
data.table(gene = d2n_genes[!(d2n_genes %in% Wang20_dt$gene)]), fill=TRUE),
id.vars = "gene", variable.name = "metric")
GQ.3[, dataset := "Wang & Goldstein 2020"]
GQ.3
GQ.3[, dataset := "Wang & Goldstein 2020"]
# Save
saveRDS(file = file.path(processed_data_dir, "GQ.3_Enhancers.RDS"), GQ.3)
## (4) TFs
TF_raw <- fread(file.path(data_dir, "Minaeva2023_TF-target_PeaksMotiffs.tsv"))[ensembl_gene_id %in% unique(symbols$ensembl_gene_id),]
file.path(data_dir, "Minaeva2023_TF-target_PeaksMotiffs.tsv")
## (4) TFs
TF_raw <- fread(file.path(data_dir, "Minaeva2023_TF-target_PeaksMotiffs.tsv"))[ensembl_gene_id %in% unique(symbols$ensembl_gene_id),]
unique(symbols$ensembl_gene_id)[!(unique(symbols$ensembl_gene_id) %in% unique(TF_raw$ensembl_gene_id) )] #FAM27C not in there
GQ.4
## (4) TFs
TF_raw <- fread(file.path(data_dir, "Minaeva2023_TF-target_PeaksMotiffs.tsv"))[ensembl_gene_id %in% unique(symbols$ensembl_gene_id),]
getwd()
TF_raw
fread(file.path(data_dir, "Minaeva2023_TF-target_PeaksMotiffs.tsv"))
## (4) TFs
TF_raw <- fread(file.path(data_dir, "Minaeva2023_TF-target_PeaksMotiffs.tsv"))[ensembl_gene_id %in% unique(symbols$ensembl_gene_id),]
unique(symbols$ensembl_gene_id)[!(unique(symbols$ensembl_gene_id) %in% unique(TF_raw$ensembl_gene_id) )] #FAM27C not in there
test <- unique(symbols$ensembl_gene_id)[!(unique(symbols$ensembl_gene_id) %in% unique(TF_raw$ensembl_gene_id) )] #FAM27C not in there
GA.0[ensembl_gene_id %in% test]
GA.0[ensembl_gene_id %in% test, ]
GA.0
symbols[ensembl_gene_id %in% test, ]
TF_raw <- fread(file.path(data_dir, "Minaeva2023_TF-target_PeaksMotiffs.tsv"))
unique(symbols$ensembl_gene_id)[!(unique(symbols$ensembl_gene_id) %in% unique(TF_raw$ensembl_gene_id) )] #FAM27C not in there
test %in% TF_raw$ensembl_gene_id
unique(symbols[, .(ensembl_gene_id, external_gene_name)])
unique(symbols[, .(ensembl_gene_id, external_gene_name)])[ensembl_gene_id %in% test, external_gene_name]
## (4) TFs
TF_raw <- fread(file.path(data_dir, "Minaeva2023_TF-target_PeaksMotiffs.tsv"))[ensembl_gene_id %in% unique(symbols$ensembl_gene_id),]
unique(symbols$ensembl_gene_id)[!(unique(symbols$ensembl_gene_id) %in% unique(TF_raw$ensembl_gene_id) )] #FAM27C not in there
TF_M2 <- merge.data.table(TF_raw[is_method_2 == T & tpm_total > 0.5, .(n_peaks = sum(n_peaks_method_2), n_motifs = sum(n_motifs_method2, na.rm = T)), .(ensembl_gene_id, tf)],
setnames(unique(symbols[, .(ensembl_gene_id, external_gene_name)]), c("ensembl_gene_id", "gene")),
by = "ensembl_gene_id")
TF_T_dt <- cbind(data.table(gene = d2n_genes), foreach(dg = c("GFI1B", "MYB", "NFE2"), .combine = cbind) %do% {
new_vars = paste0(c("n_peaks", "n_motifs"), "_", dg)
dt <- setnames(TF_M2[tf == dg, ], old = c("n_peaks", "n_motifs"), new = new_vars)
dt2 <- merge.data.table(unique(symbols[, .(ensembl_gene_id, external_gene_name)]), dt, by = "ensembl_gene_id", all.x = T)
dt2[is.na(gene), new_vars[1] := 0]
dt2[is.na(gene), new_vars[2] := 0]
dt2[match(d2n_genes, external_gene_name), .SD, .SDcols = colnames(dt2)[grepl("n_", colnames(dt2))]]
})
GQ.4 <-  melt.data.table(TF_T_dt, id.vars = "gene", variable.name = "metric")
GQ.4[, dataset := "Minaeva in prep. 2023"]
# Save
saveRDS(file = "processed_data/GQ.4_TFs.RDS", GQ.4)
# Save
saveRDS(file = file.path(processed_data_dir, "GQ.4_TFs.RDS"), GQ.4)
View(GQ.4)
TF_M2
TF_M2[tf %in% c("GFI1B", "MYB", "NFE2"), ]
TF_raw
TF_raw <- fread(file.path(data_dir, "Minaeva2023_TF-target_PeaksMotiffs.tsv"))
TF_raw[tf %in% c("GFI1B", "MYB", "NFE2"), ]
TF_raw$tf
unique(TF_raw$tf)
## (4) TFs
TF_raw <- fread(file.path(data_dir, "Minaeva2023_TF-target_PeaksMotiffs.tsv"))[ensembl_gene_id %in% unique(symbols$ensembl_gene_id),]
unique(symbols$ensembl_gene_id)[!(unique(symbols$ensembl_gene_id) %in% unique(TF_raw$ensembl_gene_id) )] #FAM27C not in there
TF_M2 <- merge.data.table(TF_raw[is_method_2 == T & tpm_total > 0.5, .(n_peaks = sum(n_peaks_method_2), n_motifs = sum(n_motifs_method2, na.rm = T)), .(ensembl_gene_id, tf)],
setnames(unique(symbols[, .(ensembl_gene_id, external_gene_name)]), c("ensembl_gene_id", "gene")),
by = "ensembl_gene_id")
TF_T_dt <- cbind(data.table(gene = d2n_genes), foreach(dg = c("GFI1B", "MYB", "NFE2"), .combine = cbind) %do% {
new_vars = paste0(c("n_peaks", "n_motifs"), "_", dg)
dt <- setnames(TF_M2[tf == dg, ], old = c("n_peaks", "n_motifs"), new = new_vars)
dt2 <- merge.data.table(unique(symbols[, .(ensembl_gene_id, external_gene_name)]), dt, by = "ensembl_gene_id", all.x = T)
dt2[is.na(gene), new_vars[1] := 0]
dt2[is.na(gene), new_vars[2] := 0]
dt2[match(d2n_genes, external_gene_name), .SD, .SDcols = colnames(dt2)[grepl("n_", colnames(dt2))]]
})
GQ.4 <-  melt.data.table(TF_T_dt, id.vars = "gene", variable.name = "metric")
GQ.4[, dataset := "Minaeva in prep. 2023"]
TF_T_dt
GQ.4 <-  melt.data.table(TF_T_dt, id.vars = "gene", variable.name = "metric")
GQ.4[, dataset := "Minaeva in prep. 2023"]
# Save
saveRDS(file = file.path(processed_data_dir, "GQ.4_TFs.RDS"), GQ.4)
