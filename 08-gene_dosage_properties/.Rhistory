num_PPI_dt <- merge.data.table(STRING_info_d2n_dt[, .(string_protein_id, preferred_name)],
merge.data.table(raw_string_physical[ protein1 %in% STRING_info_d2n_dt$string_protein_id, .N, .(protein1), ],
string_physical[protein1 %in% STRING_info_d2n_dt$string_protein_id, .N, .(protein1)],
by="protein1", all.x = T, suffixes = c("_int_wp", "_int_dn")),
by.x = "string_protein_id", by.y = "protein1", all.x = T)
num_PPI_dt[is.na(N_int_wp), N_int_wp := 0]
num_PPI_dt[is.na(N_int_dn), N_int_dn := 0]
num_PPI_dt$gene <- str_replace_all(num_PPI_dt$preferred_name, rep_str)
GQ.5 <- melt.data.table(rbind(setnames(num_PPI_dt, old = c("N_int_dn", "N_int_wp"), new = c("Num_PPIs_targeted_network", "Num_PPIs_whole_proteome")),
data.table(gene = d2n_genes[!(d2n_genes %in% num_PPI_dt$gene)]), fill=TRUE),
id.vars = "gene", variable.name = "metric")
GQ.5
GQ.5[, dataset := "String DB"]
GQ.5[, .N, .(metric, gene)]
GQ.5[, .N, .(metric, gene)]$N
GQ.5
# Count number of PPI per gene (within the d2n genes or within the entire proteome)
num_PPI_dt <- merge.data.table(STRING_info_d2n_dt[, .(string_protein_id, preferred_name)],
merge.data.table(raw_string_physical[ protein1 %in% STRING_info_d2n_dt$string_protein_id, .N, .(protein1), ],
string_physical[protein1 %in% STRING_info_d2n_dt$string_protein_id, .N, .(protein1)],
by="protein1", all.x = T, suffixes = c("_int_wp", "_int_dn")),
by.x = "string_protein_id", by.y = "protein1", all.x = T)
num_PPI_dt[is.na(N_int_wp), N_int_wp := 0]
num_PPI_dt[is.na(N_int_dn), N_int_dn := 0]
num_PPI_dt$gene <- str_replace_all(num_PPI_dt$preferred_name, rep_str)
num_PPI_dt
setnames(num_PPI_dt, old = c("N_int_dn", "N_int_wp"), new = c("Num_PPIs_targeted_network", "Num_PPIs_whole_proteome"))[]
rbind(setnames(num_PPI_dt, old = c("N_int_dn", "N_int_wp"), new = c("Num_PPIs_targeted_network", "Num_PPIs_whole_proteome")),
data.table(gene = d2n_genes[!(d2n_genes %in% num_PPI_dt$gene)]), fill=TRUE)
rbind(setnames(num_PPI_dt, old = c("N_int_dn", "N_int_wp"), new = c("Num_PPIs_targeted_network", "Num_PPIs_whole_proteome")),
data.table(gene = d2n_genes[!(d2n_genes %in% num_PPI_dt$gene)]), fill=TRUE)
# Count number of PPI per gene (within the d2n genes or within the entire proteome)
num_PPI_dt <- merge.data.table(STRING_info_d2n_dt[, .(string_protein_id, preferred_name)],
merge.data.table(raw_string_physical[ protein1 %in% STRING_info_d2n_dt$string_protein_id, .N, .(protein1), ],
string_physical[protein1 %in% STRING_info_d2n_dt$string_protein_id, .N, .(protein1)],
by="protein1", all.x = T, suffixes = c("_int_wp", "_int_dn")),
by.x = "string_protein_id", by.y = "protein1", all.x = T)
num_PPI_dt[is.na(N_int_wp), N_int_wp := 0]
num_PPI_dt[is.na(N_int_dn), N_int_dn := 0]
num_PPI_dt$gene <- str_replace_all(num_PPI_dt$preferred_name, rep_str)
rbind(setnames(num_PPI_dt, old = c("N_int_dn", "N_int_wp"), new = c("Num_PPIs_targeted_network", "Num_PPIs_whole_proteome")),
data.table(gene = d2n_genes[!(d2n_genes %in% num_PPI_dt$gene)]), fill=TRUE)
# Count number of PPI per gene (within the d2n genes or within the entire proteome)
num_PPI_dt <- merge.data.table(STRING_info_d2n_dt[, .(string_protein_id, preferred_name)],
merge.data.table(raw_string_physical[ protein1 %in% STRING_info_d2n_dt$string_protein_id, .N, .(protein1), ],
string_physical[protein1 %in% STRING_info_d2n_dt$string_protein_id, .N, .(protein1)],
by="protein1", all.x = T, suffixes = c("_int_wp", "_int_dn")),
by.x = "string_protein_id", by.y = "protein1", all.x = T)
num_PPI_dt[is.na(N_int_wp), N_int_wp := 0]
num_PPI_dt[is.na(N_int_dn), N_int_dn := 0]
num_PPI_dt$gene <- str_replace_all(num_PPI_dt$preferred_name, rep_str)
melt.data.table(rbind(setnames(num_PPI_dt, old = c("N_int_dn", "N_int_wp"), new = c("Num_PPIs_targeted_network", "Num_PPIs_whole_proteome")),
data.table(gene = d2n_genes[!(d2n_genes %in% num_PPI_dt$gene)]), fill=TRUE),
id.vars = "gene", variable.name = "metric")
num_PPI_dt
d2n_genes[!(d2n_genes %in% num_PPI_dt$gene)]
data.table(gene = d2n_genes[!(d2n_genes %in% num_PPI_dt$gene)])
num_PPI_dt
num_PPI_dt <- merge.data.table(STRING_info_d2n_dt[, .(string_protein_id, preferred_name)],
merge.data.table(raw_string_physical[ protein1 %in% STRING_info_d2n_dt$string_protein_id, .N, .(protein1), ],
string_physical[protein1 %in% STRING_info_d2n_dt$string_protein_id, .N, .(protein1)],
by="protein1", all.x = T, suffixes = c("_int_wp", "_int_dn")),
by.x = "string_protein_id", by.y = "protein1", all.x = T)
num_PPI_dt[is.na(N_int_wp), N_int_wp := 0]
num_PPI_dt[is.na(N_int_dn), N_int_dn := 0]
num_PPI_dt$gene <- str_replace_all(num_PPI_dt$preferred_name, rep_str)
num_PPI_dt
GQ.5 <- melt.data.table(rbind(setnames(num_PPI_dt[, .(gene, N_int_wp, N_int_dn)], old = c("N_int_dn", "N_int_wp"), new = c("Num_PPIs_targeted_network", "Num_PPIs_whole_proteome")),
data.table(gene = d2n_genes[!(d2n_genes %in% num_PPI_dt$gene)]), fill=TRUE),
id.vars = "gene", variable.name = "metric")
GQ.5[, dataset := "String DB"]
GQ.5
GQ.5[, .N, gene]
saveRDS(file = "processed_data/GQ.5_PPIs.RDS", GQ.5)
saveRDS(file = file.path(processed_data_dir, "GQ.5_PPIs.RDS"), GQ.5)
qualitative_v <- list.files(processed_data_dir)[grepl("^GA.", list.files(processed_data_dir))]
GA <- do.call("rbind",
lapply(qualitative_v, function(quantfile){
DT <- readRDS(file.path(processed_data_dir, quantfile))
})
)
# Order categorical annotations based on similarity
# Generate matrix with 1/0 for each
GA[, num_value := ifelse(value == T, 1, 0)]
plot_dt <- GA
ga_mat_dt <- dcast.data.table(GA[, .(gene, gene_set, num_value)], formula = gene_set ~ gene, value.var = "num_value")
ga_mat <- as.matrix(ga_mat_dt[, 2: ncol(ga_mat_dt)])
rownames(ga_mat) <- ga_mat_dt$gene_set
ga_dist <- dist(ga_mat, method = "euclidean")
ga_clust_obj <- hclust(ga_dist)
ord_ga <- ga_clust_obj$labels[ga_clust_obj$order]
plot_dt[, gene_set := factor(gene_set, levels = ord_ga)]
plot_dt[, gene := factor(gene, levels = ord_tg)]
pC <- ggplot(plot_dt, aes(x = gene_set, y = gene)) +
geom_tile(aes(fill=value), colour="white") +
scale_fill_manual("", values = list(`TRUE` = "black", `FALSE` = "grey95")) +
facet_grid(. ~ dataset, scales = "free_x", space = "free_x") +
theme_classic() +
scale_x_discrete(expand = expansion(mult = c(0.02, 0.02))) +
scale_y_discrete(expand = expansion(mult = c(0.02, 0.02))) +
theme(legend.position = "") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
theme(axis.title = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(), axis.line = element_blank()) +
theme(legend.key = element_blank(), strip.background = element_rect(colour="white", fill="white")) +
theme(strip.text.x.top = element_text(angle = 90))
pC
## Quantitative annotation values
quantfile_v <- list.files(processed_data_dir)[grepl("^GQ.", list.files(processed_data_dir))]
GQ <- do.call("rbind",
lapply(quantfile_v, function(quantfile){
DT <- readRDS(file.path(processed_data_dir, quantfile))
})
)
GQ[, scaled_value := rescale(value, to = c(0, 1)), metric]
gq_mat_dt <- dcast(GQ[, .(gene, metric, scaled_value)], metric ~ gene, value.var = "scaled_value")
gq_mat <- as.matrix(gq_mat_dt[, 2: ncol(gq_mat_dt)])
rownames(gq_mat) <- gq_mat_dt$metric
gq_dist <- dist(gq_mat, method = "euclidean")
gq_clust_obj <- hclust(gq_dist)
ord_gq <- gq_clust_obj$labels[gq_clust_obj$order]
GQ[, metric := factor(metric, levels = ord_gq)]
GQ[, gene := factor(gene, levels = ord_tg)]
GQ[, dataset := factor(dataset, levels = c("gnomAD", "Collins et al. 2022", "Wang & Goldstein 2020", "Minaeva in prep. 2023", "String DB","Hay et al. 2018"))]
pD <- ggplot(GQ, aes(x = metric, y = gene)) +
geom_tile(aes(fill=scaled_value), colour="white") +
scale_fill_gradient("scaled\nvalue", low = "white", high = "#377EB8", na.value = "grey80") +
facet_grid(. ~ dataset, scales = "free_x", space = "free_x") +
theme_classic() +
scale_x_discrete(expand = expansion(mult = c(0.02, 0.02))) +
scale_y_discrete(expand = expansion(mult = c(0.02, 0.02))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
theme(axis.title = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(), axis.line = element_blank()) +
theme(legend.key = element_blank(), strip.background = element_rect(colour="white", fill="white")) +
theme(strip.text.x.top = element_text(angle = 90))
pD
p <- cowplot::plot_grid(pB, pA, pC, pD, align = "h", axis = "tb", nrow = 1, rel_widths = c(1/20, 8.5/20, 1.5/15, 9/20))
p
## (6) Mean cell type expression
# Annotations to cellypes
bm_annotations <- fread(file = file.path(data_dir, "Hay2018_SupplementaryTable_CellAssociations.txt"))
## (6) Mean cell type expression
# Annotations to cellypes
bm_annotations <- fread(file = file.path(data_dir, "Hay2018_SupplementaryTable_CellAssociations.txt"))
## (6) Mean cell type expression
# Annotations to cellypes
bm_annotations <- fread(file = file.path(data_dir, "Hay2018_SupplementaryTable_CellAssociations.txt"))
bm_annotations$cell_id <- gsub("\\.BM[1-9]", "", bm_annotations$Cell)
bm_annotations[, celltype := ClusterName]
bm_annotations[ClusterName == "CD34+ Eo/B/Mast", celltype := "CD34+ Eo-B-Mast"]
bm_annotations[ClusterName == "Naive T-cell", celltype := "Naive CD8 T-cell"]
# Get processed data from the bone marrow study
bm_mtx_raw <- fread(file = file.path(data_dir, "Hay2018_GE-BM-HCA-Donor-Avg.txt"))[uid %in% d2n_genes,]
# Get processed data from the bone marrow study
bm_mtx_raw <- fread(file = file.path(data_dir, "Hay2018_GE-BM-HCA-Donor-Avg.txt"))[uid %in% d2n_genes,]
bm_mtx <- rbind(bm_mtx_raw, data.table(uid = d2n_genes[!(d2n_genes %in% bm_mtx_raw$uid)]), fill = TRUE)
BM <- melt.data.table(bm_mtx, id.vars = "uid", variable.name = "donor_celltype")
BM$celltype <- gsub("[FM]-BM[1-9]__", "", BM$donor_celltype)
BM$celltype <- factor(BM$celltype, levels = unique(BM$celltype))
BM_avgdonor <- BM[,list(mean_expr_donors = mean(value)), .(uid, celltype)]
BM_avgdonor[, metric := paste0(celltype, "_mean_expr")]
GQ.6 <- setnames(BM_avgdonor[!(grepl("^CD34", celltype)), .(uid, metric, mean_expr_donors)],
old = c("uid", "mean_expr_donors"),
new = c("gene", "value"))
GQ.6[, dataset := "Hay et al. 2018"]
saveRDS(file = file.path(processed_data_dir, "GQ.6_BoneMarrow.RDS"), GQ.6)
GQ.6
## Quantitative annotation values
quantfile_v <- list.files(processed_data_dir)[grepl("^GQ.", list.files(processed_data_dir))]
GQ <- do.call("rbind",
lapply(quantfile_v, function(quantfile){
DT <- readRDS(file.path(processed_data_dir, quantfile))
})
)
GQ[, scaled_value := rescale(value, to = c(0, 1)), metric]
gq_mat_dt <- dcast(GQ[, .(gene, metric, scaled_value)], metric ~ gene, value.var = "scaled_value")
gq_mat <- as.matrix(gq_mat_dt[, 2: ncol(gq_mat_dt)])
rownames(gq_mat) <- gq_mat_dt$metric
gq_dist <- dist(gq_mat, method = "euclidean")
gq_clust_obj <- hclust(gq_dist)
ord_gq <- gq_clust_obj$labels[gq_clust_obj$order]
GQ[, metric := factor(metric, levels = ord_gq)]
GQ[, gene := factor(gene, levels = ord_tg)]
GQ[, dataset := factor(dataset, levels = c("gnomAD", "Collins et al. 2022", "Wang & Goldstein 2020", "Minaeva in prep. 2023", "String DB","Hay et al. 2018"))]
pD <- ggplot(GQ, aes(x = metric, y = gene)) +
geom_tile(aes(fill=scaled_value), colour="white") +
scale_fill_gradient("scaled\nvalue", low = "white", high = "#377EB8", na.value = "grey80") +
facet_grid(. ~ dataset, scales = "free_x", space = "free_x") +
theme_classic() +
scale_x_discrete(expand = expansion(mult = c(0.02, 0.02))) +
scale_y_discrete(expand = expansion(mult = c(0.02, 0.02))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
theme(axis.title = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(), axis.line = element_blank()) +
theme(legend.key = element_blank(), strip.background = element_rect(colour="white", fill="white")) +
theme(strip.text.x.top = element_text(angle = 90))
pD
p <- cowplot::plot_grid(pB, pA, pC, pD, align = "h", axis = "tb", nrow = 1, rel_widths = c(1/20, 8.5/20, 1.5/15, 9/20))
p
BM_avgdonor[, metric := elltype]
bm_mtx <- rbind(bm_mtx_raw, data.table(uid = d2n_genes[!(d2n_genes %in% bm_mtx_raw$uid)]), fill = TRUE)
BM <- melt.data.table(bm_mtx, id.vars = "uid", variable.name = "donor_celltype")
BM$celltype <- gsub("[FM]-BM[1-9]__", "", BM$donor_celltype)
BM$celltype <- factor(BM$celltype, levels = unique(BM$celltype))
BM_avgdonor <- BM[,list(mean_expr_donors = mean(value)), .(uid, celltype)]
BM_avgdonor[, metric := elltype]
GQ.6 <- setnames(BM_avgdonor[!(grepl("^CD34", celltype)), .(uid, metric, mean_expr_donors)],
old = c("uid", "mean_expr_donors"),
new = c("gene", "value"))
GQ.6[, dataset := "Hay et al. 2018"]
BM_avgdonor[, metric := celltype]
GQ.6 <- setnames(BM_avgdonor[!(grepl("^CD34", celltype)), .(uid, metric, mean_expr_donors)],
old = c("uid", "mean_expr_donors"),
new = c("gene", "value"))
GQ.6[, dataset := "Hay et al. 2018"]
saveRDS(file = file.path(processed_data_dir, "GQ.6_BoneMarrow.RDS"), GQ.6)
## Quantitative annotation values
quantfile_v <- list.files(processed_data_dir)[grepl("^GQ.", list.files(processed_data_dir))]
GQ <- do.call("rbind",
lapply(quantfile_v, function(quantfile){
DT <- readRDS(file.path(processed_data_dir, quantfile))
})
)
GQ[, scaled_value := rescale(value, to = c(0, 1)), metric]
gq_mat_dt <- dcast(GQ[, .(gene, metric, scaled_value)], metric ~ gene, value.var = "scaled_value")
gq_mat <- as.matrix(gq_mat_dt[, 2: ncol(gq_mat_dt)])
rownames(gq_mat) <- gq_mat_dt$metric
gq_dist <- dist(gq_mat, method = "euclidean")
gq_clust_obj <- hclust(gq_dist)
ord_gq <- gq_clust_obj$labels[gq_clust_obj$order]
GQ[, metric := factor(metric, levels = ord_gq)]
GQ[, gene := factor(gene, levels = ord_tg)]
GQ[, dataset := factor(dataset, levels = c("gnomAD", "Collins et al. 2022", "Wang & Goldstein 2020", "Minaeva in prep. 2023", "String DB","Hay et al. 2018"))]
pD <- ggplot(GQ, aes(x = metric, y = gene)) +
geom_tile(aes(fill=scaled_value), colour="white") +
scale_fill_gradient("scaled\nvalue", low = "white", high = "#377EB8", na.value = "grey80") +
facet_grid(. ~ dataset, scales = "free_x", space = "free_x") +
theme_classic() +
scale_x_discrete(expand = expansion(mult = c(0.02, 0.02))) +
scale_y_discrete(expand = expansion(mult = c(0.02, 0.02))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
theme(axis.title = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(), axis.line = element_blank()) +
theme(legend.key = element_blank(), strip.background = element_rect(colour="white", fill="white")) +
theme(strip.text.x.top = element_text(angle = 90))
pD
p <- cowplot::plot_grid(pB, pA, pC, pD, align = "h", axis = "tb", nrow = 1, rel_widths = c(1/20, 8/20, 1.75/15, 9.25/20))
p
ggsave(file.path(plots_dir, "08b_PredDosage_GeneProperties_Heatmap.pdf"), p, width = 15, height = 12)
ggsave(file.path(plots_dir, "08b_PredDosage_GeneProperties_Heatmap.pdf"), p, width = 15, height = 15)
p <- cowplot::plot_grid(pB, pA, pC, pD, align = "h", axis = "tb", nrow = 1, rel_widths = c(1/20, 8/20, 1.5/15, 10/20))
p
ggsave(file.path(plots_dir, "08b_PredDosage_GeneProperties_Heatmap.pdf"), p, width = 15, height = 15)
p <- cowplot::plot_grid(pB, pA, pC, pD, align = "h", axis = "tb", nrow = 1, rel_widths = c(1/20, 8/20, 1.25/15, 10.25/20))
p
ggsave(file.path(plots_dir, "08b_PredDosage_GeneProperties_Heatmap.pdf"), p, width = 15, height = 15)
sig_feat <-  c("slope_IF", "abs_slope_IF","min_assmp","max_assmp", "min_max_range", "x_IF")
Cor_dt <- foreach(dg = c("GFI1B", "MYB", "NFE2"), .combine = rbind) %do% {
dt1 <- merge.data.table(GQ, PT_singles[dosage_gene == dg & non_monotonic == F & responsive == T, ], by = "gene")
dt2 <- dt1[!is.na(value), {
lapply(.SD[, sig_feat, with = FALSE], function(x) {
cor.test(value, x)$p.value
})
}, by = .(metric, dataset)]
dt3 <- dt1[!is.na(value), {
lapply(.SD[, sig_feat, with = FALSE], function(x) {
cor.test(value, x)$estimate
})
}, by = .(metric, dataset)]
dt4 <- merge.data.table(melt(dt2, id.vars = c("metric", "dataset"), variable.name = "sigmoid_param", value.name = "pval"),
melt(dt3, id.vars = c("metric", "dataset"), variable.name = "sigmoid_param", value.name = "r"),
by = c("metric", "dataset", "sigmoid_param"))
dt4[, dosage_gene := dg]
}
Cor_dt[, fdr := p.adjust(pval, method = "fdr")]
Cor_dt[, log10_pval := -log10(pval)]
Cor_dt[, log10_fdr := -log10(fdr)]
p <- ggplot(Cor_dt, aes(x= sigmoid_param, y = metric)) +
geom_point(aes(color=r, size=log10_pval)) +
facet_grid(dataset ~ dosage_gene, scales = "free_y", space = "free_y") +
scale_color_gradient2(low = "#377EB8", high = "#FF7F00", midpoint = 0) +
theme(panel.grid = element_blank()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  +
theme(legend.key = element_blank(), strip.background = element_rect(colour="white", fill="white")) +
theme(strip.text.y.right = element_text(angle = 0))
p
p <- ggplot(Cor_dt, aes(y = sigmoid_param, x = metric)) +
geom_point(aes(color=r, size=log10_pval)) +
facet_grid(dataset ~ dosage_gene, scales = "free_y", space = "free_y") +
scale_color_gradient2(low = "#377EB8", high = "#FF7F00", midpoint = 0) +
theme(panel.grid = element_blank()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  +
theme(legend.key = element_blank(), strip.background = element_rect(colour="white", fill="white")) +
theme(strip.text.y.right = element_text(angle = 0))
p
p <- ggplot(Cor_dt, aes(y = sigmoid_param, x = metric)) +
geom_point(aes(color=r, size=log10_pval)) +
facet_grid(dosage_gene ~ dataset, scales = "free_y", space = "free_y") +
scale_color_gradient2(low = "#377EB8", high = "#FF7F00", midpoint = 0) +
theme(panel.grid = element_blank()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  +
theme(legend.key = element_blank(), strip.background = element_rect(colour="white", fill="white")) +
theme(strip.text.y.right = element_text(angle = 0))
p
p <- ggplot(Cor_dt, aes(y = sigmoid_param, x = metric)) +
geom_point(aes(color=r, size=log10_pval)) +
facet_grid(dosage_gene ~ dataset, scales = "free_y", space = "free_y") +
scale_color_gradient2(low = "#377EB8", high = "#FF7F00", midpoint = 0) +
theme(panel.grid = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  +
theme(legend.key = element_blank(), strip.background = element_rect(colour="white", fill="white")) +
theme(strip.text.y.right = element_text(angle = 0))
p
p <- ggplot(Cor_dt, aes(y = sigmoid_param, x = metric)) +
geom_point(aes(color=r, size=log10_pval)) +
facet_grid(dosage_gene ~ dataset, scales = "free_x", space = "free_x") +
scale_color_gradient2(low = "#377EB8", high = "#FF7F00", midpoint = 0) +
theme(panel.grid = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  +
theme(legend.key = element_blank(), strip.background = element_rect(colour="white", fill="white")) +
theme(strip.text.y.right = element_text(angle = 0))
p
ord_gq
Cor_dt[, metric := factor(metric, levels = ord_gq)]
p <- ggplot(Cor_dt, aes(y = sigmoid_param, x = metric)) +
geom_point(aes(color=r, size=log10_pval)) +
facet_grid(dosage_gene ~ dataset, scales = "free_x", space = "free_x") +
scale_color_gradient2(low = "#377EB8", high = "#FF7F00", midpoint = 0) +
theme(panel.grid = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  +
theme(legend.key = element_blank(), strip.background = element_rect(colour="white", fill="white")) +
theme(strip.text.y.right = element_text(angle = 0))
p
p <- ggplot(Cor_dt, aes(y = sigmoid_param, x = metric)) +
geom_point(aes(color=r, size=log10_pval)) +
facet_grid(dosage_gene ~ dataset, scales = "free_x", space = "free_x") +
scale_color_gradient2(low = "#377EB8", high = "#FF7F00", midpoint = 0) +
theme(panel.grid = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1), axis.title.x = element_blank())  +
theme(legend.key = element_blank(), strip.background = element_rect(colour="white", fill="white")) +
theme(strip.text.y.right = element_text(angle = 0))
p
p <- ggplot(Cor_dt, aes(y = sigmoid_param, x = metric)) +
geom_point(aes(color=r, size=log10_pval)) +
facet_grid(dosage_gene ~ dataset, scales = "free_x", space = "free_x") +
scale_color_gradient2(low = "#377EB8", high = "#FF7F00", midpoint = 0) +
theme(panel.grid = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1), axis.title.x = element_blank())  +
theme(legend.key = element_blank(), strip.background = element_rect(colour="white", fill="white")) +
theme(strip.text.y.right = element_text(angle = 0)) +
labs(y = "Sigmoid parameter")
p
Cor_dt
Cor_dt[, sig_fdr10 := ifelse(fdr <= 0.1, T, F)]
p <- ggplot(Cor_dt, aes(y = sigmoid_param, x = metric)) +
geom_point(aes(color=r, size=log10_pval, alpha=sig_fdr10)) +
facet_grid(dosage_gene ~ dataset, scales = "free_x", space = "free_x") +
scale_color_gradient2(low = "#377EB8", high = "#FF7F00", midpoint = 0) +
theme(panel.grid = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1), axis.title.x = element_blank())  +
theme(legend.key = element_blank(), strip.background = element_rect(colour="white", fill="white")) +
theme(strip.text.y.right = element_text(angle = 0)) +
scale_alpha_manual(values = c(0.2, 1)) +
labs(y = "Sigmoid parameter")
p
Cor_dt$fdr
min(Cor_dt$fdr)
pval
hist(Cor_dt$pval)
p
p <- ggplot(Cor_dt, aes(y = sigmoid_param, x = metric)) +
geom_point(aes(color=r, size=log10_pval, alpha=sig_fdr10)) +
facet_grid(dosage_gene ~ dataset, scales = "free_x", space = "free_x") +
scale_color_gradient2(low = "#377EB8", high = "#FF7F00", midpoint = 0) +
theme(panel.grid = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1), axis.title.x = element_blank())  +
theme(legend.key = element_blank(), strip.background = element_rect(colour="white", fill="white")) +
theme(strip.text.y.right = element_text(angle = 0)) +
labs(y = "Sigmoid parameter")
p
p <- ggplot(Cor_dt, aes(y = sigmoid_param, x = metric)) +
p <- ggplot(Cor_dt, aes(y = sigmoid_param, x = metric)) +
geom_point(aes(color=r, size=log10_pval)) +
facet_grid(dosage_gene ~ dataset, scales = "free_x", space = "free_x") +
scale_color_gradient2(low = "#377EB8", high = "#FF7F00", midpoint = 0) +
theme(panel.grid = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1), axis.title.x = element_blank())  +
theme(legend.key = element_blank(), strip.background = element_rect(colour="white", fill="white")) +
theme(strip.text.y.right = element_text(angle = 0)) +
labs(y = "Sigmoid parameter")
p
p <- ggplot(Cor_dt, aes(y = sigmoid_param, x = metric)) +
geom_point(aes(color=r, size=log10_pval)) +
facet_grid(dosage_gene ~ dataset, scales = "free_x", space = "free_x") +
scale_color_gradient2(low = "#377EB8", high = "#FF7F00", midpoint = 0) +
theme(panel.grid = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1), axis.title.x = element_blank())  +
theme(legend.key = element_blank(), strip.background = element_rect(colour="white", fill="white")) +
theme(strip.text.y.right = element_text(angle = 0)) +
labs(y = "Sigmoid parameter")
p
p <- ggplot(Cor_dt, aes(y = sigmoid_param, x = metric)) +
geom_point(aes(color=r, size=log10_pval)) +
facet_grid(dosage_gene ~ dataset, scales = "free_x", space = "free_x") +
scale_color_gradient2(low = "#377EB8", high = "#FF7F00", midpoint = 0) +
theme(panel.grid = element_blank()) +
theme(axis.text.x = element_text(angle = 90), axis.title.x = element_blank())  +
theme(legend.key = element_blank(), strip.background = element_rect(colour="white", fill="white")) +
theme(strip.text.y.right = element_text(angle = 0)) +
labs(y = "Sigmoid parameter")
p
p <- ggplot(Cor_dt, aes(y = sigmoid_param, x = metric)) +
geom_point(aes(color=r, size=log10_pval)) +
facet_grid(dosage_gene ~ dataset, scales = "free_x", space = "free_x") +
scale_color_gradient2(low = "#377EB8", high = "#FF7F00", midpoint = 0) +
theme(panel.grid = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1), axis.title.x = element_blank())  +
theme(legend.key = element_blank(), strip.background = element_rect(colour="white", fill="white")) +
theme(strip.text.y.right = element_text(angle = 0)) +
labs(y = "Sigmoid parameter")
p
ggsave(file.path(plots_dir, "08b_PredDosage_GeneProperties_Heatmap.pdf"), p, width = 9, height = 8)
p <- cowplot::plot_grid(pB, pA, pC, pD, align = "h", axis = "tb", nrow = 1, rel_widths = c(1/20, 8/20, 1.25/15, 10.25/20))
p
ggsave(file.path(plots_dir, "08b_PredDosage_GeneProperties_Heatmap.pdf"), p, width = 15, height = 15)
ggsave(file.path(plots_dir, "08c_SigmoidParams_GeneProperties_Cor.pdf"), p, width = 9, height = 8)
p <- ggplot(Cor_dt, aes(y = sigmoid_param, x = metric)) +
geom_point(aes(color=r, size=log10_pval)) +
facet_grid(dosage_gene ~ dataset, scales = "free_x", space = "free_x") +
scale_color_gradient2(low = "#377EB8", high = "#FF7F00", midpoint = 0) +
theme(panel.grid = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1), axis.title.x = element_blank())  +
theme(legend.key = element_blank(), strip.background = element_rect(colour="white", fill="white")) +
theme(strip.text.y.right = element_text(angle = 0)) +
labs(y = "Sigmoid parameter")
p
ggsave(file.path(plots_dir, "08c_SigmoidParams_GeneProperties_Cor.pdf"), p, width = 9, height = 8)
ggsave(file.path(plots_dir, "08c_SigmoidParams_GeneProperties_Cor.pdf"), p, width = 9, height = 6)
ggsave(file.path(plots_dir, "08c_SigmoidParams_GeneProperties_Cor.pdf"), p, width = 10, height = 5)
ggsave(file.path(plots_dir, "08c_SigmoidParams_GeneProperties_Cor.pdf"), p, width = 10, height = 6)
p <- ggplot(Cor_dt, aes(y = sigmoid_param, x = metric)) +
geom_point(aes(color=r, size=log10_pval)) +
facet_grid(dosage_gene ~ dataset, scales = "free_x", space = "free_x") +
scale_color_gradient2(low = "#377EB8", high = "#FF7F00", midpoint = 0) +
theme(panel.grid = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1), axis.title.x = element_blank())  +
theme(legend.key = element_blank(), strip.background = element_rect(colour="white", fill="white")) +
theme(strip.text.y.right = element_text(angle = 0)) +
labs(y = "Sigmoid parameter") +
theme(legend.position = "bottom") +
guides(fill = guide_colourbar(barheight = 0.5,  barwidth = 6))
p
ggsave(file.path(plots_dir, "08c_SigmoidParams_GeneProperties_Cor.pdf"), p, width = 9, height = 7)
sig_feat <-  c("slope_IF", "abs_slope_IF","min_assmp","max_assmp", "min_max_range")
Cor_dt <- foreach(dg = c("GFI1B", "MYB", "NFE2"), .combine = rbind) %do% {
dt1 <- merge.data.table(GQ, PT_singles[dosage_gene == dg & non_monotonic == F & responsive == T, ], by = "gene")
dt2 <- dt1[!is.na(value), {
lapply(.SD[, sig_feat, with = FALSE], function(x) {
cor.test(value, x)$p.value
})
}, by = .(metric, dataset)]
dt3 <- dt1[!is.na(value), {
lapply(.SD[, sig_feat, with = FALSE], function(x) {
cor.test(value, x)$estimate
})
}, by = .(metric, dataset)]
dt4 <- merge.data.table(melt(dt2, id.vars = c("metric", "dataset"), variable.name = "sigmoid_param", value.name = "pval"),
melt(dt3, id.vars = c("metric", "dataset"), variable.name = "sigmoid_param", value.name = "r"),
by = c("metric", "dataset", "sigmoid_param"))
dt4[, dosage_gene := dg]
}
Cor_dt[, log10_pval := -log10(pval)]
Cor_dt[, log10_fdr := -log10(fdr)]
Cor_dt <- foreach(dg = c("GFI1B", "MYB", "NFE2"), .combine = rbind) %do% {
dt1 <- merge.data.table(GQ, PT_singles[dosage_gene == dg & non_monotonic == F & responsive == T, ], by = "gene")
dt2 <- dt1[!is.na(value), {
lapply(.SD[, sig_feat, with = FALSE], function(x) {
cor.test(value, x)$p.value
})
}, by = .(metric, dataset)]
dt3 <- dt1[!is.na(value), {
lapply(.SD[, sig_feat, with = FALSE], function(x) {
cor.test(value, x)$estimate
})
}, by = .(metric, dataset)]
dt4 <- merge.data.table(melt(dt2, id.vars = c("metric", "dataset"), variable.name = "sigmoid_param", value.name = "pval"),
melt(dt3, id.vars = c("metric", "dataset"), variable.name = "sigmoid_param", value.name = "r"),
by = c("metric", "dataset", "sigmoid_param"))
dt4[, dosage_gene := dg]
}
Cor_dt[, log10_pval := -log10(pval)]
Cor_dt[, log10_fdr := -log10(fdr)]
# Order metrics same as heatmap
Cor_dt[, metric := factor(metric, levels = ord_gq)]
p <- ggplot(Cor_dt, aes(y = sigmoid_param, x = metric)) +
geom_point(aes(color=r, size=log10_pval)) +
facet_grid(dosage_gene ~ dataset, scales = "free_x", space = "free_x") +
scale_color_gradient2(low = "#377EB8", high = "#FF7F00", midpoint = 0) +
theme(panel.grid = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1), axis.title.x = element_blank())  +
theme(legend.key = element_blank(), strip.background = element_rect(colour="white", fill="white")) +
theme(strip.text.y.right = element_text(angle = 0)) +
labs(y = "Sigmoid parameter") +
theme(legend.position = "bottom") +
guides(fill = guide_colourbar(barheight = 0.5,  barwidth = 6))
p
ggsave(file.path(plots_dir, "08c_SigmoidParams_GeneProperties_Cor.pdf"), p, width = 9, height = 7)
ggsave(file.path(plots_dir, "08c_SigmoidParams_GeneProperties_Cor.pdf"), p, width = 9, height = 6.5)
p <- cowplot::plot_grid(pB, pA, pC, pD, align = "h", axis = "tb", nrow = 1, rel_widths = c(1/20, 8/20, 1.5/15, 10/20))
p
ggsave(file.path(plots_dir, "08b_PredDosage_GeneProperties_Heatmap.pdf"), p, width = 15, height = 15)
p <- cowplot::plot_grid(pB, pA, pC, pD, align = "h", axis = "tb", nrow = 1, rel_widths = c(1/20, 7.75/20, 1.75/15, 10/20))
p
ggsave(file.path(plots_dir, "08b_PredDosage_GeneProperties_Heatmap.pdf"), p, width = 15, height = 15)
ggsave(file.path(plots_dir, "08b_PredDosage_GeneProperties_Heatmap.pdf"), p, width = 16, height = 15)
